# -*- coding: utf-8 -*-
"""pro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AgNRjn-JKvShHvr9VixJ2qJWjR37XdHX

installing kaggle library
"""

! pip install kaggle

"""uploading json file"""

! mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""importing traininig dataset


"""

#api to fetch data from kaggle
!kaggle datasets download -d kazanova/sentiment140

#extracting compressesd dataset

from zipfile import ZipFile
dataset='/content/sentiment140.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('the dataset is extracted')

"""importing dependencies"""

import numpy as np
import pandas as pd
import re  #pattern matching
from nltk.corpus import stopwords #natural language processing
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer   #convering pictorial to numerical data
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

"""printing stopwords"""

print(stopwords.words('english'))

"""data processsing"""

#loading data from csv file to pandas dataframe
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv',encoding='ISO_8859-1')

#checkin number of rows and columns
twitter_data.shape

#printing first 5 rows
twitter_data.head()

#naming columns and rading dataset again
column_names=['target','id','date','flag','user','text']
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv',names=column_names,encoding='ISO_8859-1')

twitter_data.shape

twitter_data.head()



#counting number of missing values
twitter_data.isnull().sum()

#checking distribution of target column
twitter_data['target'].value_counts()

"""convert target 4 to 1

"""

twitter_data.replace({'target':{4:1}},inplace=True)

twitter_data['target'].value_counts()

"""0= negative tweet and 1= positive tweet"""

port_stem=PorterStemmer()

def stemming(content):
  stemmed_content=re.sub('[^a-zA-Z]',' ',content)
  stemmed_content=stemmed_content.lower()
  stemmed_content=stemmed_content.split()
  stemmed_content=[port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content=' '.join(stemmed_content)
  return stemmed_content

twitter_data['stemmed_content']=twitter_data['text'].apply(stemming)

twitter_data.head()

print(twitter_data['stemmed_content'])

print(twitter_data['target'])

"""separting data and label"""

X=twitter_data['stemmed_content'].values
Y=twitter_data['target'].values

print(X)

print(Y)

"""splitting data to test and training data
80% will be training data (test_size
"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

print(X_train)

print(X_test)

"""converting textual data to numerical data with vectorizer"""

vectorizer=TfidfVectorizer()
X_train=vectorizer.fit_transform(X_train)
X_test=vectorizer.transform(X_test)

print(X_train)

print(X_test)

"""training ML model #logistic regression- classification model"""

model=LogisticRegression(max_iter=1000)

model.fit(X_train,Y_train)

"""model evaluation using accracy score"""

X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(Y_train,X_train_prediction)

print('Accuracy on training data:',training_data_accuracy)

"""accuracy score on test data"""

X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(Y_test,X_test_prediction)

print('Accuracy on testing data:',test_data_accuracy)

"""saving trained model"""

import pickle

filename='trained_model.sav'
pickle.dump(model,open(filename,'wb'))